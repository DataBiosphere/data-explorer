# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FacetValue(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, value_name=None, count=None):
        """
        FacetValue - a model defined in Swagger

        :param value_name: The value_name of this FacetValue.
        :type value_name: str
        :param count: The count of this FacetValue.
        :type count: int
        """
        self.swagger_types = {
            'value_name': str,
            'count': int
        }

        self.attribute_map = {
            'value_name': 'value_name',
            'count': 'count'
        }

        self._value_name = value_name
        self._count = count

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacetValue of this FacetValue.
        :rtype: FacetValue
        """
        return deserialize_model(dikt, cls)

    @property
    def value_name(self):
        """
        Gets the value_name of this FacetValue.
        Facet value name, for example, \"Male\".

        :return: The value_name of this FacetValue.
        :rtype: str
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """
        Sets the value_name of this FacetValue.
        Facet value name, for example, \"Male\".

        :param value_name: The value_name of this FacetValue.
        :type value_name: str
        """

        self._value_name = value_name

    @property
    def count(self):
        """
        Gets the count of this FacetValue.
        Facet value count.

        :return: The count of this FacetValue.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this FacetValue.
        Facet value count.

        :param count: The count of this FacetValue.
        :type count: int
        """

        self._count = count

